{"version":3,"sources":["Alien/Alien.js","App.js","serviceWorker.js","index.js"],"names":["alien","ps","className","astroidName","approachDist","time","App","state","asteroidInfo","name","Dist","links","this","map","value","index","key","target","rel","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAYeA,G,YAVD,SAACC,GACb,OACE,yBAAKC,UAAU,SACb,2BAAID,EAAGE,YAAP,6BAC6BF,EAAGG,aADhC,UAEUH,EAAGI,KAFb,QCoESC,E,4MAlEbC,MAAQ,CACNC,aAAc,CACZ,CAACC,KAAK,YAAaJ,KAAK,oBAAqBK,KAAK,aAClD,CAACD,KAAK,YAAaJ,KAAK,oBAAqBK,KAAK,aAClD,CAACD,KAAK,YAAaJ,KAAK,oBAAqBK,KAAK,aAClD,CAACD,KAAK,YAAaJ,KAAK,oBAAqBK,KAAK,aAClD,CAACD,KAAK,YAAaJ,KAAK,oBAAqBK,KAAK,YAClD,CAACD,KAAK,YAAaJ,KAAK,oBAAqBK,KAAK,aAClD,CAACD,KAAK,YAAaJ,KAAK,oBAAqBK,KAAK,aAClD,CAACD,KAAK,YAAaJ,KAAK,oBAAqBK,KAAK,aAClD,CAACD,KAAK,YAAaJ,KAAK,oBAAqBK,KAAK,aAClD,CAACD,KAAK,YAAaJ,KAAK,oBAAqBK,KAAK,aAClD,CAACD,KAAK,YAAaJ,KAAK,oBAAqBK,KAAK,aAClD,CAACD,KAAK,WAAYJ,KAAK,oBAAqBK,KAAK,aACjD,CAACD,KAAK,YAAaJ,KAAK,oBAAqBK,KAAK,aAClD,CAACD,KAAK,YAAaJ,KAAK,oBAAqBK,KAAK,YAClD,CAACD,KAAK,WAAYJ,KAAK,oBAAqBK,KAAK,YACjD,CAACD,KAAK,WAAYJ,KAAK,oBAAqBK,KAAK,cAEnDC,MAAQ,CACN,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,qCACA,sCACA,sCACA,qCACA,uC,uDAIM,IAAD,OACP,OACE,yBAAKT,UAAU,OACb,qFAOGU,KAAKL,MAAMI,MAAME,KAAI,SAACC,EAAOC,GAC5B,OAAO,uBAAGC,IAAKD,EAAOE,OAAO,SAASC,IAAI,sBAAsBC,KAAML,GACpE,kBAAC,EAAD,CACAX,YAAa,EAAKI,MAAMC,aAAaO,GAAON,KAC5CL,aAAc,EAAKG,MAAMC,aAAaO,GAAOL,KAC7CL,KAAM,EAAKE,MAAMC,aAAaO,GAAOV,gB,GAxDjCe,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.486bc6a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Alien.css';\r\nconst alien = (ps) => {\r\n  return (\r\n    <div className='Alien'>\r\n      <p>{ps.astroidName}\r\n        could be reached earth in {ps.approachDist}\r\n        kms on {ps.time}.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default alien;","import React, {Component} from 'react';\nimport './App.css';\n\nimport Alien from './Alien/Alien';\n\nclass App extends Component {\n\n  state = {\n    asteroidInfo: [\n      {name:'2020 PF3 ',\ttime:'2020-Aug-26 15:07',\tDist:'24,68,367'},\n      {name:'2020 QQ2 ',\ttime:'2020-Aug-27 03:15',\tDist:'32,85,240',},\n      {name:'2020 QA6 ',\ttime:'2020-Aug-27 19:41',\tDist:'24,28,726',},\n      {name:'2020 QV6 ',\ttime:'2020-Aug-28 13:54',\tDist:'38,14,632',},\n      {name:'2020 QX6 ',\ttime:'2020-Aug-31 04:14',\tDist:'4,77,123',},\n      {name:'2020 QG5 ',\ttime:'2020-Sep-01 05:30',\tDist:'29,90,137',},\n      {name:'2020 PG6 ',\ttime:'2020-Sep-02 08:43',\tDist:'22,65,867',},\n      {name:'2020 PT4 ',\ttime:'2020-Sep-08 15:54',\tDist:'18,94,145',},\n      {name:'2020 CX1 ',\ttime:'2021-Feb-18 01:29',\tDist:'18,57,580',},\n      {name:'2020 AD1 ',\ttime:'2021-Jul-04 06:45',\tDist:'10,85,083',},\n      {name:'2020 AP1 ',\ttime:'2022-Jan-07 17:32',\tDist:'17,43,804',},\n      {name:'2020 DC ',\ttime:'2022-Mar-06 09:18',\tDist:'14,87,369',},\n      {name:'2020 OO1 ',\ttime:'2023-Feb-04 20:34',\tDist:'18,42,644',},\n      {name:'2020 DG4 ',\ttime:'2023-Feb-17 19:06',\tDist:'6,36,044',},\n      {name:'2020 GE ',\ttime:'2024-Sep-24 04:25',\tDist:'6,59,589',},\n      {name:'2020 AW ',\ttime:'2028-Jan-19 04:48',\tDist:'16,23,281',},\n    ],\n    links : [\n      'https://theskylive.com/2020pf3-info',\n      'https://theskylive.com/2020qq2-info',\n      'https://theskylive.com/2020qa6-info',\n      'https://theskylive.com/2020qv6-info',\n      'https://theskylive.com/2020qx6-info',\n      'https://theskylive.com/2020qg5-info',\n      'https://theskylive.com/2020pg6-info',\n      'https://theskylive.com/2020pt4-info',\n      'https://theskylive.com/2020cx1-info',\n      'https://theskylive.com/2020ad1-info',\n      'https://theskylive.com/2020ap1-info',\n      'https://theskylive.com/2020dc-info',\n      'https://theskylive.com/2020oo1-info',\n      'https://theskylive.com/2020dg4-info',\n      'https://theskylive.com/2020ge-info',\n      'https://theskylive.com/2020aw-info',      \n    ]\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Asteroids 2020 which tried and trying to reach Earth.</h1>\n        {/* <a target=\"_blank\" rel=\"noopener noreferrer\" href={this.state.links[0]}>\n          <Alien\n            astroidName={this.state.asteroidInfo[0].name}\n            approachDist={this.state.asteroidInfo[0].Dist}\n            time={this.state.asteroidInfo[0].time}/>\n        </a> */}\n          {this.state.links.map((value, index) =>{\n            return <a key={index} target=\"_blank\" rel=\"noopener noreferrer\" href={value}>\n              <Alien\n              astroidName={this.state.asteroidInfo[index].name}\n              approachDist={this.state.asteroidInfo[index].Dist}\n              time={this.state.asteroidInfo[index].time}/>\n          </a>\n          })}\n\n      </div>\n    );\n  }\n  // return\n  // React.createElement('div',{className:'App'},React.createElement('h1',null,'Do\n  // e s jsx work?'));\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}